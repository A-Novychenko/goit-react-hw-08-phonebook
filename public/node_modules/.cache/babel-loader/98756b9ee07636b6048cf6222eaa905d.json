{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.js\";\nimport { nanoid } from 'nanoid';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { Add, FormWrap, Input, Label, ErrorName, ErrorTel } from './ContactForm.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  name: '',\n  number: '+38'\n};\nconst Schema = Yup.object().shape({\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\n  number: Yup.string().phone('UK', 'Please enter a valid phone number in the format for UKRAINE').required('A phone number is required')\n});\nexport const ContactForm = _ref => {\n  let {\n    contacts,\n    onChange\n  } = _ref;\n\n  const handleForm = (values, _ref2) => {\n    let {\n      resetForm\n    } = _ref2;\n    const id = nanoid();\n    const {\n      name,\n      number\n    } = values;\n    const isInConntacts = contacts.find(contact => contact.name === name);\n\n    if (isInConntacts) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    onChange({\n      id,\n      name,\n      number\n    });\n    resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: INITIAL_STATE,\n    validationSchema: Schema,\n    onSubmit: handleForm,\n    children: /*#__PURE__*/_jsxDEV(FormWrap, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"name\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          component: ErrorName,\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(Input, {\n          type: \"tel\",\n          name: \"number\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"number\",\n          component: ErrorTel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Add, {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["D:/Projects/goit-react-hw-02-phonebook/src/components/ContactForm/ContactForm.js"],"names":["nanoid","Formik","ErrorMessage","Yup","Add","FormWrap","Input","Label","ErrorName","ErrorTel","INITIAL_STATE","name","number","Schema","object","shape","string","max","required","phone","ContactForm","contacts","onChange","handleForm","values","resetForm","id","isInConntacts","find","contact","alert"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,QAArC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,gBAAP;AACA,SACEC,GADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,KAJF,EAKEC,SALF,EAMEC,QANF,QAOO,sBAPP;;AASA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,MAAM,EAAE;AAFY,CAAtB;AAKA,MAAMC,MAAM,GAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB;AAChCJ,EAAAA,IAAI,EAAER,GAAG,CAACa,MAAJ,GAAaC,GAAb,CAAiB,EAAjB,EAAqB,iBAArB,EAAwCC,QAAxC,EAD0B;AAEhCN,EAAAA,MAAM,EAAET,GAAG,CAACa,MAAJ,GACLG,KADK,CACC,IADD,EACO,6DADP,EAELD,QAFK,CAEI,4BAFJ;AAFwB,CAAnB,CAAf;AAOA,OAAO,MAAME,WAAW,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;;AACrD,QAAMC,UAAU,GAAG,CAACC,MAAD,YAA2B;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AAC5C,UAAMC,EAAE,GAAG1B,MAAM,EAAjB;AACA,UAAM;AAAEW,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAmBY,MAAzB;AACA,UAAMG,aAAa,GAAGN,QAAQ,CAACO,IAAT,CAAcC,OAAO,IAAIA,OAAO,CAAClB,IAAR,KAAiBA,IAA1C,CAAtB;;AAEA,QAAIgB,aAAJ,EAAmB;AACjBG,MAAAA,KAAK,CAAE,GAAEnB,IAAK,0BAAT,CAAL;AACA;AACD;;AAEDW,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,EAAF;AAAMf,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,KAAD,CAAR;AACAa,IAAAA,SAAS;AACV,GAZD;;AAcA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAEf,aADjB;AAEE,IAAA,gBAAgB,EAAEG,MAFpB;AAGE,IAAA,QAAQ,EAAEU,UAHZ;AAAA,2BAKE,QAAC,QAAD;AAAA,8BACE,QAAC,KAAD;AAAA,wCAEE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBAFF,eAOE,QAAC,YAAD;AAAc,UAAA,SAAS,EAAEf,SAAzB;AAAoC,UAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,KAAD;AAAA,0CAEE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBAFF,eAOE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,UAAA,SAAS,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAoBE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA7CM;KAAMW,W","sourcesContent":["import { nanoid } from 'nanoid';\r\nimport { Formik, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport 'yup-phone-lite';\r\nimport {\r\n  Add,\r\n  FormWrap,\r\n  Input,\r\n  Label,\r\n  ErrorName,\r\n  ErrorTel,\r\n} from './ContactForm.styled';\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '+38',\r\n};\r\n\r\nconst Schema = Yup.object().shape({\r\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\r\n  number: Yup.string()\r\n    .phone('UK', 'Please enter a valid phone number in the format for UKRAINE')\r\n    .required('A phone number is required'),\r\n});\r\n\r\nexport const ContactForm = ({ contacts, onChange }) => {\r\n  const handleForm = (values, { resetForm }) => {\r\n    const id = nanoid();\r\n    const { name, number } = values;\r\n    const isInConntacts = contacts.find(contact => contact.name === name);\r\n\r\n    if (isInConntacts) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    onChange({ id, name, number });\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={INITIAL_STATE}\r\n      validationSchema={Schema}\r\n      onSubmit={handleForm}\r\n    >\r\n      <FormWrap>\r\n        <Label>\r\n          Name\r\n          <Input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          />\r\n          <ErrorMessage component={ErrorName} name=\"name\" />\r\n        </Label>\r\n\r\n        <Label>\r\n          Number\r\n          <Input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          />\r\n          <ErrorMessage name=\"number\" component={ErrorTel} />\r\n        </Label>\r\n        <Add type=\"submit\">Add contact</Add>\r\n      </FormWrap>\r\n    </Formik>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}