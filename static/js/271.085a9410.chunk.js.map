{"version":3,"file":"static/js/271.085a9410.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/Modal/Modal.js","components/ContactUpdate/ContactUpdate.js","components/Contact/Contact.js","components/Contact/Contact.styled.js","components/ContactList/ContactList.js","components/ContactList/ContactList.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\n// import { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Button, TextField, Box, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useContacts } from 'hooks';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '+38',\n};\n\nconst Schema = Yup.object({\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\n  number: Yup.string()\n    .phone('UK', 'Please enter a valid phone number in the format for UKRAINE')\n    .required('A phone number is required'),\n});\n\nexport const ContactForm = ({ onToggleModal }) => {\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const formik = useFormik({\n    initialValues: { ...INITIAL_STATE },\n    validationSchema: Schema,\n    onSubmit: (values, { resetForm }) => {\n      const { name, number } = values;\n\n      if (contacts.length) {\n        const isInConntacts =\n          contacts.find(contact => contact.name === name) ||\n          contacts.find(contact => contact.number === number);\n\n        if (isInConntacts) {\n          alert(`${name} is already in contacts.`);\n          return;\n        }\n      }\n\n      dispatch(addContact(values));\n      resetForm();\n      onToggleModal();\n    },\n  });\n\n  return (\n    <>\n      <Button\n        sx={{ display: 'block', ml: 'auto' }}\n        onClick={() => {\n          onToggleModal();\n        }}\n      >\n        <CloseIcon />\n      </Button>\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          mx: 'auto',\n          width: 500,\n          height: 380,\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n          <PersonAddAltIcon />\n        </Avatar>\n        <Typography component=\"h2\" variant=\"h5\">\n          Add contact\n        </Typography>\n\n        <form onSubmit={formik.handleSubmit} autoComplete=\"off\" sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Phone\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Add contact\n          </Button>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { Fade, Modal, Box, Backdrop } from '@mui/material';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  border: '2px solid #1976d2',\n  boxShadow: 24,\n  p: 4,\n  borderRadius: 2,\n};\n\nexport const TransitionsModal = ({ children, handleClose, open }) => (\n  <div>\n    <Modal\n      aria-labelledby=\"add-contact\"\n      aria-describedby=\"add-contact-form\"\n      open={open}\n      onClose={handleClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n        },\n      }}\n    >\n      <Fade in={open}>\n        <Box sx={style}>{children}</Box>\n      </Fade>\n    </Modal>\n  </div>\n);\n\nTransitionsModal.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n","import * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Button, TextField, Box, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useContacts } from 'hooks';\n\nconst Schema = Yup.object({\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\n  number: Yup.string()\n    .phone('UK', 'Please enter a valid phone number in the format for UKRAINE')\n    .required('A phone number is required'),\n});\n\nexport const ContactUpdate = ({\n  onToggleModal,\n  contact: { name, number, id },\n}) => {\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  const formik = useFormik({\n    initialValues: { name, number },\n    validationSchema: Schema,\n    onSubmit: (values, { resetForm }) => {\n      const { name, number } = values;\n\n      if (contacts.length) {\n        const isInConntacts =\n          contacts.find(\n            contact => contact.name === name && contact.id !== id\n          ) ||\n          contacts.find(\n            contact => contact.number === number && contact.id !== id\n          );\n\n        if (isInConntacts) {\n          alert(`${name} is already in contacts.`);\n          return;\n        }\n      }\n\n      dispatch(updateContact({ ...values, id }));\n      resetForm();\n      onToggleModal();\n    },\n  });\n\n  return (\n    <>\n      <Button\n        sx={{ display: 'block', ml: 'auto' }}\n        onClick={() => {\n          onToggleModal();\n        }}\n      >\n        <CloseIcon />\n      </Button>\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          mx: 'auto',\n          width: 500,\n          height: 380,\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n          <PersonAddAltIcon />\n        </Avatar>\n        <Typography component=\"h2\" variant=\"h5\">\n          Update contact\n        </Typography>\n        <form onSubmit={formik.handleSubmit} autoComplete=\"off\" sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Phone\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Save\n          </Button>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nContactUpdate.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Typography, IconButton, Box } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport EditIcon from '@mui/icons-material/Edit';\nimport CallIcon from '@mui/icons-material/Call';\n\nimport { TransitionsModal } from 'components/Modal/Modal';\nimport { ContactUpdate } from 'components/ContactUpdate';\n\nexport const Contact = ({ name, number, id }) => {\n  const [isBtnActive, setIsBtnActive] = useState(false);\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    setIsBtnActive(true);\n  };\n\n  return (\n    <>\n      <Box\n        component={'div'}\n        sx={{\n          display: 'flex',\n\n          alignItems: 'center',\n\n          mx: 'auto',\n          border: '1px solid #1976d2',\n          borderRadius: 1,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            width: 500,\n            ml: 2,\n          }}\n        >\n          <ContactPhoneIcon sx={{ mr: 2, color: '#1976d2' }} />\n          <Typography>{name}</Typography>\n        </Box>\n\n        <Box\n          sx={{\n            textAlign: 'center',\n            width: 200,\n            height: '100%',\n            py: 1.2,\n            borderRight: '1px solid #1976d2',\n            borderLeft: '1px solid #1976d2',\n          }}\n        >\n          <Typography sx={{ textAlign: 'center' }}>{number}</Typography>\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            alignItems: 'center',\n            mx: 'auto',\n            width: 200,\n          }}\n        >\n          <IconButton\n            component={'a'}\n            href={`tel:${number}`}\n            edge=\"end\"\n            aria-label=\"delete\"\n            sx={{\n              ':hover': {\n                bgcolor: 'white',\n                color: 'green',\n              },\n            }}\n            color=\"primary\"\n          >\n            <CallIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"edit\"\n            type=\"button\"\n            onClick={handleOpen}\n            disabled={isBtnActive}\n            color=\"primary\"\n          >\n            <EditIcon />\n          </IconButton>\n\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            type=\"button\"\n            onClick={handleDelete}\n            disabled={isBtnActive}\n            sx={{\n              ':hover': {\n                bgcolor: 'white',\n                color: 'red',\n              },\n            }}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {open && (\n        <TransitionsModal handleClose={handleClose} open={open}>\n          <ContactUpdate\n            onToggleModal={handleClose}\n            contact={{ name, number, id }}\n          />\n        </TransitionsModal>\n      )}\n    </>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Name = styled.p`\n  font-weight: 500;\n`;\n\nexport const Inner = styled.div`\n  /* display: flex;\n  gap: 8px; */\n`;\n\nexport const Remove = styled.button`\n  background-color: transparent;\n  border: none;\n  color: red;\n  border-radius: 4px;\n  cursor: pointer;\n\n  :hover {\n    background-color: red;\n    color: white;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { Contact } from 'components/Contact';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { LoaderLocal } from 'components/Loader';\nimport { useContacts } from 'hooks';\n\nexport const ContactList = () => {\n  const { visibleContacts, isLoading } = useContacts();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div style={{ height: '16px' }}>{isLoading && <LoaderLocal />}</div>\n\n      <Box\n        component={'ul'}\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1,\n        }}\n      >\n        {visibleContacts.map(({ name, id, number }) => (\n          <Box\n            component={'li'}\n            key={id}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <Contact name={name} number={number} id={id}></Contact>\n          </Box>\n        ))}\n      </Box>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between; */\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  /*  max-width: 360px; */\n`;\n","import { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\n\nimport { setFilterValue } from 'redux/contacts/filterSlice';\nimport { useContacts } from 'hooks';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const { filter } = useContacts();\n\n  const handleChange = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        label=\"Search contact\"\n        variant=\"filled\"\n        sx={{\n          display: 'flex',\n          width: 0.5,\n          mt: 5,\n          mb: 2,\n          mx: 'auto',\n          boxShadow: 1,\n          color: '#1976d2',\n          bgcolor: 'rgba(25, 118, 210, 0.1)',\n        }}\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"search\"\n      />\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\n\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { TransitionsModal } from 'components/Modal/Modal';\n\nexport default function Contacts() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <Button\n        onClick={handleOpen}\n        variant=\"contained\"\n        sx={{ display: 'flex', mx: 'auto', my: 4 }}\n      >\n        <PersonAddAltIcon fontSize=\"large\" />\n        <Typography ml={2}> add contact</Typography>\n      </Button>\n      <Filter />\n      <ContactList />\n\n      {open && (\n        <TransitionsModal handleClose={handleClose} open={open}>\n          <ContactForm onToggleModal={handleClose} />\n        </TransitionsModal>\n      )}\n    </div>\n  );\n}\n"],"names":["INITIAL_STATE","name","number","Schema","Yup","max","required","phone","ContactForm","_ref","onToggleModal","dispatch","useDispatch","contacts","useContacts","formik","useFormik","initialValues","_objectSpread","validationSchema","onSubmit","values","_ref2","resetForm","length","find","contact","alert","concat","addContact","_jsxs","_Fragment","children","_jsx","Button","sx","display","ml","onClick","CloseIcon","Box","marginTop","flexDirection","alignItems","mx","width","height","Avatar","m","bgcolor","PersonAddAltIcon","Typography","component","variant","handleSubmit","autoComplete","mt","TextField","margin","fullWidth","id","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","mb","style","position","top","left","transform","border","boxShadow","p","borderRadius","TransitionsModal","handleClose","open","Modal","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","ContactUpdate","_ref$contact","updateContact","Contact","_useState","useState","_useState2","_slicedToArray","isBtnActive","setIsBtnActive","_useState3","_useState4","setOpen","ContactPhoneIcon","mr","color","textAlign","py","borderRight","borderLeft","justifyContent","IconButton","href","edge","CallIcon","disabled","EditIcon","deleteContact","DeleteIcon","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","ContactList","_useContacts","visibleContacts","isLoading","useEffect","fetchContacts","LoaderLocal","gap","map","Filter","filter","pattern","title","e","setFilterValue","target","placeholder","Contacts","my","fontSize"],"sourceRoot":""}