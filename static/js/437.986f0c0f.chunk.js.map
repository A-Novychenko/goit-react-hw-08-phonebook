{"version":3,"file":"static/js/437.986f0c0f.chunk.js","mappings":"+SAEaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAO,EACrCC,EAAiB,SAAAF,GAAK,OAAIA,EAAMG,SAASC,KAAM,EAC/CC,EAAkB,SAAAL,GAAK,OAAIA,EAAMG,SAASG,SAAU,EACpDC,EAAc,SAAAP,GAAK,OAAIA,EAAMG,SAASK,KAAM,EAE5CC,GAA0BC,EAAAA,EAAAA,IACrC,CAACR,EAAgBH,IACjB,SAACI,EAAUF,GACT,OAAIE,GAAYA,EAASQ,OAChBR,EAASF,QAAO,SAAAW,GAAO,OAAAA,EAAJC,KACnBC,cAAcC,OAAOC,SAASf,EAAOa,cAAcC,OAAO,IAG1D,EAEX,I,4DCLIE,EAAgB,CACpBJ,KAAM,GACNK,OAAQ,OAGJC,EAASC,EAAAA,GAAW,CACxBP,KAAMO,EAAAA,KAAaC,IAAI,GAAI,mBAAmBC,WAC9CJ,OAAQE,EAAAA,KACLG,MAAM,KAAM,+DACZD,SAAS,gCAGDE,EAAc,SAAHZ,GAA2B,IAArBa,EAAab,EAAba,cACtBC,GAAWC,EAAAA,EAAAA,MACXxB,GAAWyB,EAAAA,EAAAA,IAAY1B,GAEvB2B,GAASC,EAAAA,EAAAA,IAAU,CACvBC,eAAaC,EAAAA,EAAAA,GAAA,GAAOf,GACpBgB,iBAAkBd,EAClBe,SAAU,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACXxB,EAAiBsB,EAAjBtB,KAAMK,EAAWiB,EAAXjB,OAEd,GAAIf,EAASQ,SAETR,EAASmC,MAAK,SAAAC,GAAO,OAAIA,EAAQ1B,OAASA,CAAI,KAC9CV,EAASmC,MAAK,SAAAC,GAAO,OAAIA,EAAQrB,SAAWA,CAAM,KAIlD,YADAsB,MAAM,GAADC,OAAI5B,EAAI,6BAKjBa,GAASgB,EAAAA,EAAAA,IAAWP,IACpBE,IACAZ,GACF,IAGF,OACEkB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,GAAI,CAAEC,QAAS,QAASC,GAAI,QAC5BC,QAAS,WACP1B,GACF,EAAEoB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,OAEZT,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CACFL,GAAI,CACFM,UAAW,EACXL,QAAS,OACTM,cAAe,SACfC,WAAY,SACZC,GAAI,OACJC,MAAO,IACPC,OAAQ,KACRd,SAAA,EAEFC,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACZ,GAAI,CAAEa,EAAG,EAAGC,QAAS,gBAAiBjB,UAC5CC,EAAAA,EAAAA,KAACiB,EAAAA,EAAgB,OAEnBjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAIrB,SAAC,iBAIxCF,EAAAA,EAAAA,MAAA,QAAMT,SAAUL,EAAOsC,aAAcC,aAAa,MAAMpB,GAAI,CAAEqB,GAAI,GAAIxB,SAAA,EACpEC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPC,WAAS,EACTC,GAAG,OACHC,MAAM,OACN7D,KAAK,OACL8D,MAAO9C,EAAOM,OAAOtB,KACrB+D,SAAU/C,EAAOgD,aACjBrE,MAAOqB,EAAOiD,QAAQjE,MAAQkE,QAAQlD,EAAOmD,OAAOnE,MACpDoE,WAAYpD,EAAOiD,QAAQjE,MAAQgB,EAAOmD,OAAOnE,QAGnDiC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPC,WAAS,EACTC,GAAG,SACH5D,KAAK,SACL6D,MAAM,QACNQ,KAAK,MACLP,MAAO9C,EAAOM,OAAOjB,OACrB0D,SAAU/C,EAAOgD,aACjBrE,MAAOqB,EAAOiD,QAAQ5D,QAAU6D,QAAQlD,EAAOmD,OAAO9D,QACtD+D,WAAYpD,EAAOiD,QAAQ5D,QAAUW,EAAOmD,OAAO9D,UAErD4B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLmC,KAAK,SACLV,WAAS,EACTN,QAAQ,YACRlB,GAAI,CAAEqB,GAAI,EAAGc,GAAI,GAAItC,SACtB,wBAOX,E,gFChHMuC,EAAQ,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACX9B,MAAO,IACPI,QAAS,mBACT2B,OAAQ,oBACRC,UAAW,GACXC,EAAG,EACHC,aAAc,GAGHC,EAAmB,SAAHjF,GAAA,IAAMiC,EAAQjC,EAARiC,SAAUiD,EAAWlF,EAAXkF,YAAaC,EAAInF,EAAJmF,KAAI,OAC5DjD,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACJ,kBAAgB,cAChB,mBAAiB,mBACjBD,KAAMA,EACNE,QAASH,EACTI,sBAAoB,EACpBC,MAAO,CAAEC,SAAUC,EAAAA,GACnBC,UAAW,CACTF,SAAU,CACRG,QAAS,MAEX1D,UAEFC,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAACC,GAAIV,EAAKlD,UACbC,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACL,GAAIoC,EAAMvC,SAAEA,SAGjB,ECxBF1B,EAASC,EAAAA,GAAW,CACxBP,KAAMO,EAAAA,KAAaC,IAAI,GAAI,mBAAmBC,WAC9CJ,OAAQE,EAAAA,KACLG,MAAM,KAAM,+DACZD,SAAS,gCAGDoF,EAAgB,SAAH9F,GAGnB,IAFLa,EAAab,EAAba,cAAakF,EAAA/F,EACb2B,QAAW1B,EAAI8F,EAAJ9F,KAAMK,EAAMyF,EAANzF,OAAQuD,EAAEkC,EAAFlC,GAEnB/C,GAAWC,EAAAA,EAAAA,MACXxB,GAAWyB,EAAAA,EAAAA,IAAY1B,GAEvB2B,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAAElB,KAAAA,EAAMK,OAAAA,GACvBe,iBAAkBd,EAClBe,SAAU,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACXxB,EAAiBsB,EAAjBtB,KAAMK,EAAWiB,EAAXjB,OAEd,GAAIf,EAASQ,SAETR,EAASmC,MACP,SAAAC,GAAO,OAAIA,EAAQ1B,OAASA,GAAQ0B,EAAQkC,KAAOA,CAAE,KAEvDtE,EAASmC,MACP,SAAAC,GAAO,OAAIA,EAAQrB,SAAWA,GAAUqB,EAAQkC,KAAOA,CAAE,KAK3D,YADAjC,MAAM,GAADC,OAAI5B,EAAI,6BAKjBa,GAASkF,EAAAA,EAAAA,KAAa5E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIG,GAAM,IAAEsC,GAAAA,MACpCpC,IACAZ,GACF,IAGF,OACEkB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLC,GAAI,CAAEC,QAAS,QAASC,GAAI,QAC5BC,QAAS,WACP1B,GACF,EAAEoB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,OAEZT,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CACFL,GAAI,CACFM,UAAW,EACXL,QAAS,OACTM,cAAe,SACfC,WAAY,SACZC,GAAI,OACJC,MAAO,IACPC,OAAQ,KACRd,SAAA,EAEFC,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACZ,GAAI,CAAEa,EAAG,EAAGC,QAAS,gBAAiBjB,UAC5CC,EAAAA,EAAAA,KAACiB,EAAAA,EAAgB,OAEnBjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,UAAU,KAAKC,QAAQ,KAAIrB,SAAC,oBAGxCF,EAAAA,EAAAA,MAAA,QAAMT,SAAUL,EAAOsC,aAAcC,aAAa,MAAMpB,GAAI,CAAEqB,GAAI,GAAIxB,SAAA,EACpEC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPC,WAAS,EACTC,GAAG,OACHC,MAAM,OACN7D,KAAK,OACL8D,MAAO9C,EAAOM,OAAOtB,KACrB+D,SAAU/C,EAAOgD,aACjBrE,MAAOqB,EAAOiD,QAAQjE,MAAQkE,QAAQlD,EAAOmD,OAAOnE,MACpDoE,WAAYpD,EAAOiD,QAAQjE,MAAQgB,EAAOmD,OAAOnE,QAGnDiC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRC,OAAO,SACPC,WAAS,EACTC,GAAG,SACH5D,KAAK,SACL6D,MAAM,QACNQ,KAAK,MACLP,MAAO9C,EAAOM,OAAOjB,OACrB0D,SAAU/C,EAAOgD,aACjBrE,MAAOqB,EAAOiD,QAAQ5D,QAAU6D,QAAQlD,EAAOmD,OAAO9D,QACtD+D,WAAYpD,EAAOiD,QAAQ5D,QAAUW,EAAOmD,OAAO9D,UAErD4B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CACLmC,KAAK,SACLV,WAAS,EACTN,QAAQ,YACRlB,GAAI,CAAEqB,GAAI,EAAGc,GAAI,GAAItC,SACtB,iBAOX,ECxGagE,EAAU,SAAHjG,GAA8B,IAAxBC,EAAID,EAAJC,KAAMK,EAAMN,EAANM,OAAQuD,EAAE7D,EAAF6D,GACtCqC,GAAsCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC5BtF,GAAWC,EAAAA,EAAAA,MAEjByF,GAAwBL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhCrB,EAAIsB,EAAA,GAAEC,EAAOD,EAAA,GAEdvB,EAAc,WAAH,OAASwB,GAAQ,EAAO,EAOzC,OACE3E,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CACFY,UAAW,MACXjB,GAAI,CACFC,QAAS,OAETO,WAAY,SAEZC,GAAI,OACJgC,OAAQ,oBACRG,aAAc,GACd/C,SAAA,EAEFF,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CACFL,GAAI,CACFC,QAAS,OACTO,WAAY,SACZE,MAAO,IACPR,GAAI,GACJL,SAAA,EAEFC,EAAAA,EAAAA,KAACyE,EAAAA,EAAgB,CAACvE,GAAI,CAAEwE,GAAI,EAAGC,MAAO,cACtC3E,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAAAnB,SAAEhC,QAGfiC,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CACFL,GAAI,CACF0E,UAAW,SACXhE,MAAO,IACPC,OAAQ,OACRgE,GAAI,IACJC,YAAa,oBACbC,WAAY,qBACZhF,UAEFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAAChB,GAAI,CAAE0E,UAAW,UAAW7E,SAAE3B,OAG5CyB,EAAAA,EAAAA,MAACU,EAAAA,EAAG,CACFL,GAAI,CACFC,QAAS,OACT6E,eAAgB,eAChBtE,WAAY,SACZC,GAAI,OACJC,MAAO,KACPb,SAAA,EAEFC,EAAAA,EAAAA,KAACiF,EAAAA,EAAU,CACT9D,UAAW,IACX+D,KAAI,OAAAvF,OAASvB,GACb+G,KAAK,MACL,aAAW,SACXjF,GAAI,CACF,SAAU,CACRc,QAAS,QACT2D,MAAO,UAGXA,MAAM,UAAS5E,UAEfC,EAAAA,EAAAA,KAACoF,EAAAA,EAAQ,OAEXpF,EAAAA,EAAAA,KAACiF,EAAAA,EAAU,CACTE,KAAK,MACL,aAAW,OACX/C,KAAK,SACL/B,QA3ES,WAAH,OAASmE,GAAQ,EAAM,EA4E7Ba,SAAUjB,EACVO,MAAM,UAAS5E,UAEfC,EAAAA,EAAAA,KAACsF,EAAAA,EAAQ,OAGXtF,EAAAA,EAAAA,KAACiF,EAAAA,EAAU,CACTE,KAAK,MACL,aAAW,SACX/C,KAAK,SACL/B,QAnFW,WACnBzB,GAAS2G,EAAAA,EAAAA,IAAc5D,IACvB0C,GAAe,EACjB,EAiFUgB,SAAUjB,EACVlE,GAAI,CACF,SAAU,CACRc,QAAS,QACT2D,MAAO,QAET5E,UAEFC,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,YAKhBvC,IACCjD,EAAAA,EAAAA,KAAC+C,EAAgB,CAACC,YAAaA,EAAaC,KAAMA,EAAKlD,UACrDC,EAAAA,EAAAA,KAAC4D,EAAa,CACZjF,cAAeqE,EACfvD,QAAS,CAAE1B,KAAAA,EAAMK,OAAAA,EAAQuD,GAAAA,SAMrC,E,sBC9HoB8D,EAAAA,GAAAA,EAAQC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+BAIPF,EAAAA,GAAAA,IAAUG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,+CAKTF,EAAAA,GAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,yL,SCCtBG,EAAc,WACzB,IAAMC,GAAkBjH,EAAAA,EAAAA,IAAYnB,GAC9BH,GAAYsB,EAAAA,EAAAA,IAAYvB,GACxBG,GAAQoB,EAAAA,EAAAA,IAAYrB,GAEpBmB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAmH,EAAAA,EAAAA,YAAU,WACRpH,GAASqH,EAAAA,EAAAA,MACX,GAAG,CAACrH,KAGFiB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKyC,MAAO,CAAEzB,OAAQ,QAASd,SAAA,CAC5BvC,IAAawC,EAAAA,EAAAA,KAACkG,EAAAA,EAAW,IACzBxI,IAASsC,EAAAA,EAAAA,KAAA,KAAGsC,MAAO,CAAEqC,MAAO,OAAQ5E,SAAErC,QAGzCsC,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CACFY,UAAW,KACXjB,GAAI,CACFC,QAAS,OACTM,cAAe,SACf0F,IAAK,GACLpG,SAEDgG,EAAgBK,KAAI,SAAAtI,GAAA,IAAGC,EAAID,EAAJC,KAAM4D,EAAE7D,EAAF6D,GAAIvD,EAAMN,EAANM,OAAM,OACtC4B,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CACFY,UAAW,KAEXjB,GAAI,CACFC,QAAS,OACT6E,eAAgB,gBAChBtE,WAAY,UACZX,UAEFC,EAAAA,EAAAA,KAAC+D,EAAO,CAAChG,KAAMA,EAAMK,OAAQA,EAAQuD,GAAIA,KAPpCA,EAQD,QAKhB,E,GCpDoB8D,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gGAKTF,EAAAA,GAAAA,GAASG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,iH,SCDhBU,EAAS,WACpB,IAAMzH,GAAWC,EAAAA,EAAAA,MACX1B,GAAS2B,EAAAA,EAAAA,IAAY7B,GAM3B,OACE+C,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACRI,MAAM,iBACNR,QAAQ,SACRlB,GAAI,CACFC,QAAS,OACTS,MAAO,GACPW,GAAI,EACJc,GAAI,EACJ1B,GAAI,OACJiC,UAAW,EACX+B,MAAO,UACP3D,QAAS,2BAEXM,aAAa,MACbc,KAAK,OACLrE,KAAK,SACLuI,QAAQ,yFACRC,MAAM,+FACN1E,MAAO1E,EACP2E,SAzBe,SAAA0E,GACnB5H,GAAS6H,EAAAA,EAAAA,GAAeD,EAAEE,OAAO7E,OACnC,EAwBM8E,YAAY,YAIpB,EC9Be,SAASC,IACtB,IAAA5C,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCf,EAAIiB,EAAA,GAAEM,EAAON,EAAA,GAEdlB,EAAc,WAAH,OAASwB,GAAQ,EAAO,EAEzC,OACE3E,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAACI,EAAAA,EAAM,CACLI,QANa,WAAH,OAASmE,GAAQ,EAAM,EAOjCpD,QAAQ,YACRlB,GAAI,CAAEC,QAAS,OAAQQ,GAAI,OAAQkG,GAAI,GAAI9G,SAAA,EAE3CC,EAAAA,EAAAA,KAACiB,EAAAA,EAAgB,CAAC6F,SAAS,WAC3B9G,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACd,GAAI,EAAEL,SAAC,qBAErBC,EAAAA,EAAAA,KAACqG,EAAM,KACPrG,EAAAA,EAAAA,KAAC8F,EAAW,IAEX7C,IACCjD,EAAAA,EAAAA,KAAC+C,EAAgB,CAACC,YAAaA,EAAaC,KAAMA,EAAKlD,UACrDC,EAAAA,EAAAA,KAACtB,EAAW,CAACC,cAAeqE,QAKtC,C","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.js","components/Modal/Modal.js","components/ContactUpdate/ContactUpdate.js","components/Contact/Contact.js","components/Contact/Contact.styled.js","components/ContactList/ContactList.js","components/ContactList/ContactList.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectedVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (contacts && contacts.length) {\n      return contacts.filter(({ name }) =>\n        name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n      );\n    } else {\n      return [];\n    }\n  }\n);\n","import * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Button, TextField, Box, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '+38',\n};\n\nconst Schema = Yup.object({\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\n  number: Yup.string()\n    .phone('UK', 'Please enter a valid phone number in the format for UKRAINE')\n    .required('A phone number is required'),\n});\n\nexport const ContactForm = ({ onToggleModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: { ...INITIAL_STATE },\n    validationSchema: Schema,\n    onSubmit: (values, { resetForm }) => {\n      const { name, number } = values;\n\n      if (contacts.length) {\n        const isInConntacts =\n          contacts.find(contact => contact.name === name) ||\n          contacts.find(contact => contact.number === number);\n\n        if (isInConntacts) {\n          alert(`${name} is already in contacts.`);\n          return;\n        }\n      }\n\n      dispatch(addContact(values));\n      resetForm();\n      onToggleModal();\n    },\n  });\n\n  return (\n    <>\n      <Button\n        sx={{ display: 'block', ml: 'auto' }}\n        onClick={() => {\n          onToggleModal();\n        }}\n      >\n        <CloseIcon />\n      </Button>\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          mx: 'auto',\n          width: 500,\n          height: 380,\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n          <PersonAddAltIcon />\n        </Avatar>\n        <Typography component=\"h2\" variant=\"h5\">\n          Add contact\n        </Typography>\n\n        <form onSubmit={formik.handleSubmit} autoComplete=\"off\" sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Phone\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Add contact\n          </Button>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { Fade, Modal, Box, Backdrop } from '@mui/material';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 600,\n  bgcolor: 'background.paper',\n  border: '2px solid #1976d2',\n  boxShadow: 24,\n  p: 4,\n  borderRadius: 2,\n};\n\nexport const TransitionsModal = ({ children, handleClose, open }) => (\n  <div>\n    <Modal\n      aria-labelledby=\"add-contact\"\n      aria-describedby=\"add-contact-form\"\n      open={open}\n      onClose={handleClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n        },\n      }}\n    >\n      <Fade in={open}>\n        <Box sx={style}>{children}</Box>\n      </Fade>\n    </Modal>\n  </div>\n);\n\nTransitionsModal.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n","import * as Yup from 'yup';\nimport 'yup-phone-lite';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Avatar, Button, TextField, Box, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst Schema = Yup.object({\n  name: Yup.string().max(20, 'Max: 20 symbols').required(),\n  number: Yup.string()\n    .phone('UK', 'Please enter a valid phone number in the format for UKRAINE')\n    .required('A phone number is required'),\n});\n\nexport const ContactUpdate = ({\n  onToggleModal,\n  contact: { name, number, id },\n}) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: { name, number },\n    validationSchema: Schema,\n    onSubmit: (values, { resetForm }) => {\n      const { name, number } = values;\n\n      if (contacts.length) {\n        const isInConntacts =\n          contacts.find(\n            contact => contact.name === name && contact.id !== id\n          ) ||\n          contacts.find(\n            contact => contact.number === number && contact.id !== id\n          );\n\n        if (isInConntacts) {\n          alert(`${name} is already in contacts.`);\n          return;\n        }\n      }\n\n      dispatch(updateContact({ ...values, id }));\n      resetForm();\n      onToggleModal();\n    },\n  });\n\n  return (\n    <>\n      <Button\n        sx={{ display: 'block', ml: 'auto' }}\n        onClick={() => {\n          onToggleModal();\n        }}\n      >\n        <CloseIcon />\n      </Button>\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          mx: 'auto',\n          width: 500,\n          height: 380,\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'primary.main' }}>\n          <PersonAddAltIcon />\n        </Avatar>\n        <Typography component=\"h2\" variant=\"h5\">\n          Update contact\n        </Typography>\n        <form onSubmit={formik.handleSubmit} autoComplete=\"off\" sx={{ mt: 1 }}>\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            error={formik.touched.name && Boolean(formik.errors.name)}\n            helperText={formik.touched.name && formik.errors.name}\n          />\n\n          <TextField\n            margin=\"normal\"\n            fullWidth\n            id=\"number\"\n            name=\"number\"\n            label=\"Phone\"\n            type=\"tel\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            error={formik.touched.number && Boolean(formik.errors.number)}\n            helperText={formik.touched.number && formik.errors.number}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Save\n          </Button>\n        </form>\n      </Box>\n    </>\n  );\n};\n\nContactUpdate.propTypes = {\n  onToggleModal: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Typography, IconButton, Box } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport EditIcon from '@mui/icons-material/Edit';\nimport CallIcon from '@mui/icons-material/Call';\n\nimport { TransitionsModal } from 'components/Modal/Modal';\nimport { ContactUpdate } from 'components/ContactUpdate';\n\nexport const Contact = ({ name, number, id }) => {\n  const [isBtnActive, setIsBtnActive] = useState(false);\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    setIsBtnActive(true);\n  };\n\n  return (\n    <>\n      <Box\n        component={'div'}\n        sx={{\n          display: 'flex',\n\n          alignItems: 'center',\n\n          mx: 'auto',\n          border: '1px solid #1976d2',\n          borderRadius: 1,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            width: 500,\n            ml: 2,\n          }}\n        >\n          <ContactPhoneIcon sx={{ mr: 2, color: '#1976d2' }} />\n          <Typography>{name}</Typography>\n        </Box>\n\n        <Box\n          sx={{\n            textAlign: 'center',\n            width: 200,\n            height: '100%',\n            py: 1.2,\n            borderRight: '1px solid #1976d2',\n            borderLeft: '1px solid #1976d2',\n          }}\n        >\n          <Typography sx={{ textAlign: 'center' }}>{number}</Typography>\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-around',\n            alignItems: 'center',\n            mx: 'auto',\n            width: 200,\n          }}\n        >\n          <IconButton\n            component={'a'}\n            href={`tel:${number}`}\n            edge=\"end\"\n            aria-label=\"delete\"\n            sx={{\n              ':hover': {\n                bgcolor: 'white',\n                color: 'green',\n              },\n            }}\n            color=\"primary\"\n          >\n            <CallIcon />\n          </IconButton>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"edit\"\n            type=\"button\"\n            onClick={handleOpen}\n            disabled={isBtnActive}\n            color=\"primary\"\n          >\n            <EditIcon />\n          </IconButton>\n\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            type=\"button\"\n            onClick={handleDelete}\n            disabled={isBtnActive}\n            sx={{\n              ':hover': {\n                bgcolor: 'white',\n                color: 'red',\n              },\n            }}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {open && (\n        <TransitionsModal handleClose={handleClose} open={open}>\n          <ContactUpdate\n            onToggleModal={handleClose}\n            contact={{ name, number, id }}\n          />\n        </TransitionsModal>\n      )}\n    </>\n  );\n};\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Name = styled.p`\n  font-weight: 500;\n`;\n\nexport const Inner = styled.div`\n  /* display: flex;\n  gap: 8px; */\n`;\n\nexport const Remove = styled.button`\n  background-color: transparent;\n  border: none;\n  color: red;\n  border-radius: 4px;\n  cursor: pointer;\n\n  :hover {\n    background-color: red;\n    color: white;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box } from '@mui/material';\nimport { Contact } from 'components/Contact';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectedVisibleContacts,\n} from 'redux/contacts/contactsSelectors';\nimport { LoaderLocal } from 'components/Loader';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectedVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div style={{ height: '16px' }}>\n        {isLoading && <LoaderLocal />}\n        {error && <p style={{ color: 'red' }}>{error}</p>}\n      </div>\n\n      <Box\n        component={'ul'}\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1,\n        }}\n      >\n        {visibleContacts.map(({ name, id, number }) => (\n          <Box\n            component={'li'}\n            key={id}\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <Contact name={name} number={number} id={id}></Contact>\n          </Box>\n        ))}\n      </Box>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  /* display: flex;\n  flex-direction: column;\n  justify-content: space-between; */\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  /*  max-width: 360px; */\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\n\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n\n  return (\n    <>\n      <TextField\n        label=\"Search contact\"\n        variant=\"filled\"\n        sx={{\n          display: 'flex',\n          width: 0.5,\n          mt: 5,\n          mb: 2,\n          mx: 'auto',\n          boxShadow: 1,\n          color: '#1976d2',\n          bgcolor: 'rgba(25, 118, 210, 0.1)',\n        }}\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"search\"\n      />\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, Typography } from '@mui/material';\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt';\n\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { TransitionsModal } from 'components/Modal/Modal';\n\nexport default function Contacts() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <Button\n        onClick={handleOpen}\n        variant=\"contained\"\n        sx={{ display: 'flex', mx: 'auto', my: 4 }}\n      >\n        <PersonAddAltIcon fontSize=\"large\" />\n        <Typography ml={2}> add contact</Typography>\n      </Button>\n      <Filter />\n      <ContactList />\n\n      {open && (\n        <TransitionsModal handleClose={handleClose} open={open}>\n          <ContactForm onToggleModal={handleClose} />\n        </TransitionsModal>\n      )}\n    </div>\n  );\n}\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectedVisibleContacts","createSelector","length","_ref","name","toLowerCase","trim","includes","INITIAL_STATE","number","Schema","Yup","max","required","phone","ContactForm","onToggleModal","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","_objectSpread","validationSchema","onSubmit","values","_ref2","resetForm","find","contact","alert","concat","addContact","_jsxs","_Fragment","children","_jsx","Button","sx","display","ml","onClick","CloseIcon","Box","marginTop","flexDirection","alignItems","mx","width","height","Avatar","m","bgcolor","PersonAddAltIcon","Typography","component","variant","handleSubmit","autoComplete","mt","TextField","margin","fullWidth","id","label","value","onChange","handleChange","touched","Boolean","errors","helperText","type","mb","style","position","top","left","transform","border","boxShadow","p","borderRadius","TransitionsModal","handleClose","open","Modal","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","ContactUpdate","_ref$contact","updateContact","Contact","_useState","useState","_useState2","_slicedToArray","isBtnActive","setIsBtnActive","_useState3","_useState4","setOpen","ContactPhoneIcon","mr","color","textAlign","py","borderRight","borderLeft","justifyContent","IconButton","href","edge","CallIcon","disabled","EditIcon","deleteContact","DeleteIcon","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","ContactList","visibleContacts","useEffect","fetchContacts","LoaderLocal","gap","map","Filter","pattern","title","e","setFilterValue","target","placeholder","Contacts","my","fontSize"],"sourceRoot":""}